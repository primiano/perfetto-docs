# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../gn/perfetto.gni")

# Prevent that this file is accidentally included in embedder builds.
assert(enable_perfetto_ui)

dist_dir = "$root_build_dir/site"
gen_dir = "$target_out_dir/gen"
nodejs_root = "../buildtools/nodejs"
nodejs_bin = rebase_path("$nodejs_root/bin", root_build_dir)

# +----------------------------------------------------------------------------+
# | The outer "ui" target to just ninja -C out/xxx ui                          |
# +----------------------------------------------------------------------------+

group("site") {
  deps = [
    ":assets_dist",
    ":index_dist",
    ":markdown",
    ":scss",
  ]
}

# +----------------------------------------------------------------------------+
# | Template used to run node binaries using the hermetic node toolchain.      |
# +----------------------------------------------------------------------------+
template("node_bin") {
  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "inputs",
                             "outputs",
                             "depfile",
                           ])
    deps = [ ":node_modules" ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
    script = "../../gn/standalone/build_tool_wrapper.py"
    _node_cmd = invoker.node_cmd
    args = []
    if (defined(invoker.suppress_stdout) && invoker.suppress_stdout) {
      args += [ "--suppress_stdout" ]
    }
    if (defined(invoker.suppress_stderr) && invoker.suppress_stderr) {
      args += [ "--suppress_stderr" ]
    }
    args += [
              "--path=$nodejs_bin",
              "node",
              rebase_path("node_modules/.bin/$_node_cmd", root_build_dir),
            ] + invoker.args
  }
}

action("node_modules") {
  script = "../../gn/standalone/build_tool_wrapper.py"
  stamp_file = "$dist_dir/.$target_name.stamp"
  cur_dir = rebase_path(".", root_build_dir)
  args = [
    "--stamp",
    rebase_path(stamp_file, root_build_dir),
    "--chdir=$cur_dir",
    "--path=$nodejs_bin",
    "npm",
    "install",
  ]
  inputs = [
    "package.json",
    "package-lock.json",
  ]
  outputs = [ stamp_file ]
}

copy("assets_dist") {
  sources = [
    "node_modules/highlight.js/styles/tomorrow-night.css",
    "src/assets/analysis.png",
    "src/assets/app_profiling.png",
    "src/assets/app_tracing.png",
    "src/assets/brand.png",
    "src/assets/favicon.png",
    "src/assets/home.png",
    "src/assets/script.js",
    "src/assets/sprite.png",
    "src/assets/sys_profiling.png",
    "src/assets/ui.png",
  ]
  outputs = [ "$dist_dir/assets/{{source_file_part}}" ]
}

node_bin("scss") {
  inputs = [ "src/assets/style.scss" ]
  outputs = [ "$dist_dir/assets/style.css" ]
  node_cmd = "node-sass"
  args = [
    "--quiet",
    rebase_path(inputs[0], root_build_dir),
    rebase_path(outputs[0], root_build_dir),
  ]
}

md_file_list = root_build_dir + "/docs.deps"
exec_script("../../gn/standalone/glob.py",
            [
              "--root=" + rebase_path("../../docs", root_build_dir),
              "--filter=*.md",
              "--output=" + rebase_path(md_file_list),
            ],
            "",
            [ "../../docs/toc.md" ])

html_templates = [
  "src/template_header.html",
  "src/template_footer.html",
  "src/template_index.html",
  "src/template_markdown.html",
]

action("navmap") {
  js_src = "src/markdown_render.js"
  script = "../../gn/standalone/build_tool_wrapper.py"
  inputs = [
             "../../docs/toc.md",
             js_src,
           ] + html_templates
  outputs = [ "$dist_dir/docs/_nav.html" ]
  args = [
    "--path=$nodejs_bin",
    "node",
    rebase_path(js_src, root_build_dir),
    "-i",
    rebase_path(inputs[0], root_build_dir),
    "--odir",
    rebase_path(dist_dir, root_build_dir),
    "-o",
    rebase_path(outputs[0], root_build_dir),
  ]
}

action("index_dist") {
  js_src = "src/markdown_render.js"
  template_file = "src/template_index.html"
  script = "../../gn/standalone/build_tool_wrapper.py"
  outputs = [ "$dist_dir/index.html" ]
  inputs = [ js_src ] + html_templates
  args = [
    "--path=$nodejs_bin",
    "node",
    rebase_path(js_src, root_build_dir),
    "-t",
    rebase_path(template_file, root_build_dir),
    "--odir",
    rebase_path(dist_dir, root_build_dir),
    "-o",
    rebase_path(outputs[0], root_build_dir),
  ]
}

action_foreach("markdown") {
  deps = [ ":navmap" ]
  js_src = "src/markdown_render.js"
  template_file = "src/template_markdown.html"
  sources = read_file(md_file_list, "list lines")
  script = "../../gn/standalone/build_tool_wrapper.py"
  outputs = [ "$dist_dir/docs/{{source_name_part}}" ]
  inputs = [ js_src ] + html_templates
  args = [
    "--path=$nodejs_bin",
    "node",
    rebase_path(js_src, root_build_dir),
    "-i",
    rebase_path("{{source}}", root_build_dir),
    "-t",
    rebase_path(template_file, root_build_dir),
    "--odir",
    rebase_path(dist_dir, root_build_dir),
    "-o",
    rebase_path(outputs[0], root_build_dir),
  ]
}
